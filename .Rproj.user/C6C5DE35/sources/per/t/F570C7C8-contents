
#' A function to apply an SVM model to a new set of text data
#'
#' @param text_count A new tidy dataframe of textual data pre-processed by tds_process
#' @param model A model generated by tds_model.
#' @param classification_matrix A term/document matrix. Set to false (by default) to create the matrix from text_count.
#' @param prob_state Set to true (default) to get the detailed probabilities. This is highly recommended but can take longer.
#' @param tidy_results Set to true (default) to get the results in a tidy format.
#' @return The results of the SVM model.
tds_apply <- function(text_count, model, classification_matrix = FALSE, prob_state = TRUE, tidy_results = TRUE) {

  #Just in case, the user would prefer to pass their own matrix.
  if (classification_matrix == FALSE) {
    classification_matrix = tds_matrix(text_count)
  }

  #We ensure that the new word matrix only contains words listed in the model.
  model_words <- dimnames(model$SV)[[2]] #The words of the model are nested inside $SV
  no_model_words <- model_words[!(model_words %in% colnames(classification_matrix))] #We create a list of words that are not in the new matrix.
  match_model_words <- model_words[model_words %in% colnames(classification_matrix)] #We create a list of words that are shared by the new matrix and the model.
  new_matrix_corrected <- as.data.frame(classification_matrix[,match_model_words])

  #In case there is words in the models that are not in the new matrix, we state them at 0.
  new_matrix_corrected[,no_model_words] <- 0
  new_matrix_corrected <- as.matrix(new_matrix_corrected)
  new_matrix_corrected <- new_matrix_corrected[,model_words]

  #Everything is ready for actual predictions.
  predictions <- predict(model, new_matrix_corrected, probability=prob_state)
  if(prob_state == FALSE) {
    predictions <- data_frame(document = names(predictions), label_predicted = predictions)
  }
  if(prob_state == TRUE & tidy_results == TRUE) {
    predictions <- tds_retrieve(predictions)
  }

  return(predictions)
}
